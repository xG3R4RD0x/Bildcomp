What happens here?
1. We separate y, u, v + rgb
- We do this to be able to work with the y, u, b channels and perform decorrelation on each one
- The rgb is a transformation of these to be able to display it in the player
2. In the prediction
- We make a prediction of 3 modes (vertical, horizontal, and average)
- We use 3 modes because it is fairly fast and not too complex
- Each frame is divided into blocks (default 8)
- We calculate a padding to transform the frame size (this is for the case where the frame size is not divisible by the block size, so as not to leave leftover pixels)
- The extra pixels with the padding are initialized to 0
- Then we cut the frame to the original size and this does not affect decoding
- In each block, we evaluate which mode gives the lowest error (error is original - prediction)
- The mode with the lowest error is saved and passed as the result
// I pass it in binary to be able to pass it as a matrix and not as a string
// It is necessary to pass and save it in the header because it is needed for decoding
